<body class="text-gray-800 flex flex-col min-h-screen">

    <header class="bg-white shadow-md sticky top-0 z-50">
        <nav class="container mx-auto px-6 py-4 flex justify-between items-center">
            <a href="/" class="text-2xl font-bold brand-dark-green">
                GreenDrop
            </a>
            
            <div class="hidden md:flex items-center space-x-4">
                <form action="/logout" method="GET" class="inline">
                    <button type="submit" class="py-2 px-4 rounded-lg font-medium text-white bg-red-600 hover:bg-red-700 transition-all duration-300 transform hover:scale-105">
                        Sair
                    </button>
                </form>
            </div>

            <button class="md:hidden focus:outline-none" id="mobile-menu-button">
                <i data-feather="menu" class="h-6 w-6 text-gray-600"></i>
            </button>
        </nav>

        <div class="md:hidden bg-white shadow-md absolute top-full left-0 w-full z-50 hidden" id="mobile-menu">
            <div class="px-6 py-4">
                <a href="/" class="block py-2 px-4 rounded-lg font-medium text-white bg-brand-green hover:bg-brand-green-dark transition-all duration-300 transform hover:scale-105">
                    Sair
                </a>
            </div>
        </div>
    </header>

    <main class="flex-grow container mx-auto p-4 sm:p-6 lg:p-8">
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold brand-dark-green mb-2">Encontre Nossos Pontos de Coleta</h1>
            <p class="text-lg text-gray-600">Localize o ponto GreenDrop mais próximo de você.</p>
        </div>

        <div class="flex flex-col lg:flex-row gap-8">
            <aside class="w-full lg:w-1/3 xl:w-1/4 bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold brand-dark-green mb-4">Pontos Próximos</h2>
                <div class="mb-4">
                    <input type="text" placeholder="Buscar por endereço ou CEP..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500">
                </div>
                <div id="locations-list" class="space-y-2 overflow-y-auto" style="max-height: calc(100vh - 380px);">
                </div>
            </aside>
            
            <section class="w-full lg:w-2/3 xl:w-3/4">
                <div id="map" class="shadow-lg rounded-2xl h-[600px] w-full"></div>
            </section>
        </div>
    </main>
    
    <script>
        feather.replace();

        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');

        mobileMenuButton.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden');
        });

        // Carregar pontos de coleta da API
        let locations = [];

        async function carregarPontos() {
            try {
                const response = await fetch('/api/pontos');
                const pontos = await response.json();
                
                locations = pontos.map(ponto => ({
                    id: ponto.id,
                    name: ponto.nome,
                    address: ponto.endereco,
                    lat: parseFloat(ponto.latitude),
                    lng: parseFloat(ponto.longitude),
                    residuos: ponto.residuos.map(r => r.nome).join(', ') || 'Não especificado',
                    telefone: ponto.telefone,
                    horario: ponto.horarioFuncionamento,
                }));

                inicializarMapa();
            } catch (error) {
                console.error('Erro ao carregar pontos:', error);
                // Usar dados mock se a API falhar
                locations = [
                    {
                        id: 1,
                        name: "Ponto de Coleta - Parque Ibirapuera",
                        address: "Av. Pedro Álvares Cabral, s/n - Vila Mariana",
                        lat: -23.588,
                        lng: -46.656,
                        residuos: "Plástico, Papel, Vidro"
                    },
                ];
                inicializarMapa();
            }
        }

        function inicializarMapa() {
            // Centralizar no primeiro ponto ou em São Paulo
            const centerLat = locations.length > 0 ? locations[0].lat : -23.56;
            const centerLng = locations.length > 0 ? locations[0].lng : -46.66;
            
            const map = L.map('map').setView([centerLat, centerLng], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            const greenIcon = L.divIcon({
                className: 'custom-marker-icon',
                iconSize: [20, 20],
                iconAnchor: [10, 10],
                popupAnchor: [0, -10]
            });

            const locationsList = document.getElementById('locations-list');
            const markers = {};

            locations.forEach(location => {
                const marker = L.marker([location.lat, location.lng], { icon: greenIcon }).addTo(map)
                    .bindPopup(`
                        <div class="font-sans">
                            <h3 class="font-bold text-lg brand-dark-green">${location.name}</h3>
                            <p class="text-gray-600 text-sm mb-2">${location.address}</p>
                            <p class="text-sm text-gray-500"><strong>Aceita:</strong> ${location.residuos}</p>
                            ${location.horario ? `<p class="text-sm text-gray-500"><strong>Horário:</strong> ${location.horario}</p>` : ''}
                            <a href="/pontos/${location.id}" class="text-green-600 hover:underline text-sm font-medium mt-2 inline-block">Ver detalhes →</a>
                        </div>
                    `);
                
                markers[location.id] = marker;

                const locationItem = document.createElement('div');
                locationItem.className = 'p-4 rounded-lg cursor-pointer hover:bg-green-50 transition-colors border-b border-gray-100';
                locationItem.innerHTML = `
                    <h3 class="font-semibold brand-dark-green mb-1">${location.name}</h3>
                    <p class="text-sm text-gray-600 mb-2">${location.address}</p>
                    <div class="flex flex-wrap gap-1">
                        ${location.residuos.split(', ').slice(0, 3).map(r => `
                            <span class="px-2 py-0.5 text-xs font-medium rounded-full bg-green-100 text-green-800">${r}</span>
                        `).join('')}
                        ${location.residuos.split(', ').length > 3 ? '<span class="text-xs text-gray-500">...</span>' : ''}
                    </div>
                `;
                
                locationItem.addEventListener('click', () => {
                    map.flyTo([location.lat, location.lng], 15);
                    marker.openPopup();
                });

                locationsList.appendChild(locationItem);
            });

            // Ajustar bounds se houver pontos
            if (locations.length > 0) {
                const bounds = L.latLngBounds(locations.map(loc => [loc.lat, loc.lng]));
                map.fitBounds(bounds, { padding: [50, 50] });
            }
        }

        // Carregar pontos ao carregar a página
        carregarPontos();

    </script>
</body>
